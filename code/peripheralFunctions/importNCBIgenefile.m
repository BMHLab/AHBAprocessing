function Homosapiensgeneinfo = importNCBIgenefile(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   HOMOSAPIENSGENEINFO = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   HOMOSAPIENSGENEINFO = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Homosapiensgeneinfo = importfile('Homo_sapiens_gene_info.txt', 2, 60675);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/03/05 14:15:55

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,7,15]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,7,15]);
rawCellColumns = raw(:, [3,4,5,6,8,9,10,11,12,13,14,16]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
Homosapiensgeneinfo = table;
Homosapiensgeneinfo.tax_id = cell2mat(rawNumericColumns(:, 1));
Homosapiensgeneinfo.GeneID = cell2mat(rawNumericColumns(:, 2));
Homosapiensgeneinfo.Symbol = rawCellColumns(:, 1);
Homosapiensgeneinfo.LocusTag = rawCellColumns(:, 2);
Homosapiensgeneinfo.Synonyms = rawCellColumns(:, 3);
Homosapiensgeneinfo.dbXrefs = rawCellColumns(:, 4);
Homosapiensgeneinfo.chromosome = cell2mat(rawNumericColumns(:, 3));
Homosapiensgeneinfo.map_location = rawCellColumns(:, 5);
Homosapiensgeneinfo.description = rawCellColumns(:, 6);
Homosapiensgeneinfo.type_of_gene = rawCellColumns(:, 7);
Homosapiensgeneinfo.Symbol_from_nomenclature_authority = rawCellColumns(:, 8);
Homosapiensgeneinfo.Full_name_from_nomenclature_authority = rawCellColumns(:, 9);
Homosapiensgeneinfo.Nomenclature_status = rawCellColumns(:, 10);
Homosapiensgeneinfo.Other_designations = rawCellColumns(:, 11);
Homosapiensgeneinfo.Modification_date = cell2mat(rawNumericColumns(:, 4));
Homosapiensgeneinfo.Feature_type = rawCellColumns(:, 12);

